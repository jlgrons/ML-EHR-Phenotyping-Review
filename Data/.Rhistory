Study2,
Phenotype_ref,
Phenotype,
diff,
DL_better,
!!sym(metric),
Method) %>%
mutate_if(~ all(. %in% c(0, NA)), ~ replace(., is.na(.), 0))
}
# Load necessary packages
library(ggplot2)
library(tidyverse)
library(kableExtra)
library(ggsci)
library(grid)
library(gridExtra)
library(ggvenn)
library(ggpattern)
library(cowplot)
library(splitstackshape)
library(janitor)
# Functions for analysis
source('analysis_functions.R')
plot_metrics(df,
comparison = "not weakly",
study = "Phenotype_ref",
metric = "AUROC",
large_fig,
xlim = 0.5) +
theme(legend.position = "bottom")
weakly_supervised
df <- weakly_supervised
df <- get_metrics(df, "traditional")
df <- df %>% filter(Best_performing_AUROC != "")
df$Phenotype_ref <- paste0(df$Phenotype, " [", df$Ref, "]")
View(df)
plot_metrics(df,
comparison = "not weakly",
study = "Phenotype_ref",
metric = "AUROC",
large_fig,
xlim = 0.5) +
theme(legend.position = "bottom")
df <- deep_supervised
df_formatted <- get_metrics(df, "traditional")
df_formatted$Best_performing_model <- gsub(" ", "",
df_formatted$Best_performing_model,
fixed = TRUE)
df_ML_better_1 <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "DL"),
"Best_performing",
"Best_comparator_traditional",
metrics = "deep")
df_ML_better_2 <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "Rule-based"),
"Best_comparator_traditional",
"Best_comparator_DL",
metrics = "deep")
df_ML_better_2$Best_performing_model <- "DL"
df_ML_better_2$Best_performing_Sensitivity <- df_ML_better_2$Best_comparator_DL_Sensitivity
df_ML_better_2$Best_performing_PPV <- df_ML_better_2$Best_comparator_DL_PPV
df_ML_better <- rbind(df_ML_better_1, df_ML_better_2)
df_traditional_better <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "TraditionalML"),
"Best_comparator_traditional",
"Best_performing",
metrics = "deep")
g1_df <- df_ML_better %>% filter(baseline_all_better == 1)
g1 <- plot_rule_compare(g1_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g1_df <- df_ML_better %>% filter(baseline_all_better == 1)
g1 <- plot_deep_compare(g1_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g1
# Replace the long phenotype description.
df_formatted$Phenotype_ref[df_formatted$PMID == 34514351] <- "Social determinants of health [56]"
df_formatted$Phenotype_ref[df_formatted$PMID == 35007754] <- "Social determinants of health [50]"
df_formatted$Phenotype_ref[df_formatted$PMID == 34791302] <- "Aspects of frailty [61]"
df_formatted$Phenotype_ref[df_formatted$PMID == 32548622] <- "Acute care conditions [60]"
df_ML_better <- rbind(df_ML_better_1, df_ML_better_2)
df_traditional_better <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "TraditionalML"),
"Best_comparator_traditional",
"Best_performing",
metrics = "deep")
g1_df <- df_ML_better %>% filter(baseline_all_better == 1)
g1 <- plot_deep_compare(g1_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g2_df <- df_ML_better %>% filter(baseline_all_better != 1,
baseline_sens_better == 1,
(baseline_ppv_better == 1 | is.na(baseline_ppv_better)))
g1
# Get traditional ML models that compare to rule-based.
df_formatted <- get_metrics(df, "traditional")
# Replace the long phenotype description.
df_formatted$Phenotype_ref[df_formatted$PMID == 34514351] <- "Social determinants of health [56]"
df_formatted$Phenotype_ref[df_formatted$PMID == 35007754] <- "Social determinants of health [50]"
df_formatted$Phenotype_ref[df_formatted$PMID == 34791302] <- "Aspects of frailty [61]"
df_formatted$Phenotype_ref[df_formatted$PMID == 32548622] <- "Acute care conditions [60]"
df_formatted$Phenotype_ref[df_formatted$PMID == 32970677] <- paste(df_formatted$Phenotype[df_formatted$PMID == 32970677],
"[34]")
df_formatted$Phenotype_ref[df_formatted$PMID == 31135882] <- paste(df_formatted$Phenotype[df_formatted$PMID == 32970677],
"[80]")
df_formatted$Phenotype_ref[df_formatted$PMID == 30266231] <- paste(df_formatted$Phenotype[df_formatted$PMID == 30266231],
"[163]")
df_formatted$Phenotype_ref[df_formatted$PMID == 32169670] <- paste(df_formatted$Phenotype[df_formatted$PMID == 32169670],
"[159]")
df_formatted$Best_performing_model <- gsub(" ", "",
df_formatted$Best_performing_model,
fixed = TRUE)
df_ML_better_1 <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "DL"),
"Best_performing",
"Best_comparator_traditional",
metrics = "deep")
df_ML_better_2 <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "Rule-based"),
"Best_comparator_traditional",
"Best_comparator_DL",
metrics = "deep")
df_ML_better_2$Best_performing_model <- "DL"
df_ML_better_2$Best_performing_Sensitivity <- df_ML_better_2$Best_comparator_DL_Sensitivity
df_ML_better_2$Best_performing_PPV <- df_ML_better_2$Best_comparator_DL_PPV
df_ML_better <- rbind(df_ML_better_1, df_ML_better_2)
df_traditional_better <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "TraditionalML"),
"Best_comparator_traditional",
"Best_performing",
metrics = "deep")
g1_df <- df_ML_better %>% filter(baseline_all_better == 1)
g1 <- plot_deep_compare(g1_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g1
g2_df <- df_ML_better %>% filter(baseline_all_better != 1,
baseline_sens_better == 1,
(baseline_ppv_better == 1 | is.na(baseline_ppv_better)))
g2 <- plot_deep_compare(g2_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g2_df <- df_ML_better %>% filter(baseline_all_better == 0,
baseline_sens_better == 1,
(baseline_ppv_better == 1 | is.na(baseline_ppv_better)))
g2 <- plot_deep_compare(g2_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g2_df <- df_ML_better %>% filter(baseline_all_better == 0,
baseline_sens_better == 0,
(baseline_ppv_better == 1 | is.na(baseline_ppv_better)))
g2 <- plot_deep_compare(g2_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g2
g3_df <- df_ML_better %>% filter(baseline_all_better != 1 &
baseline_sens_better == 0,
(baseline_ppv_better == 1 | is.na(baseline_ppv_better)))
g3 <- plot_deep_compare(g3_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g3
g3_df <- df_ML_better %>% filter(baseline_all_better != 1 &
baseline_sens_better == 0,
(baseline_ppv_better == 1 | is.na(baseline_ppv_better)))
g3 <- plot_deep_compare(g3_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g3
g3_df <- df_ML_better %>% filter(baseline_all_better == 0 &
baseline_sens_better == 1,
(baseline_ppv_better == 0 | is.na(baseline_ppv_better)))
g3 <- plot_deep_compare(g3_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g3
g4_df <- df_traditional_better
g4 <- plot_deep_compare(g4_df, study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g4
# Note: Please make deep learning dots yellow and traditional blue
# This makes sense with other plots where the "more advanced method" is yellow.
plot_validate_metrics(deep_supervised,
comparator = "traditional",
baseline = "deep",
large_fig = FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# Load necessary packages
library(ggplot2)
library(tidyverse)
library(kableExtra)
library(ggsci)
library(grid)
library(gridExtra)
library(ggvenn)
library(ggpattern)
library(cowplot)
library(splitstackshape)
library(janitor)
# Functions for analysis
source('analysis_functions.R')
# Read in annotation file and include selected articles
df <- read.csv("../Data/article_charting_101722_with_citations.csv")
# Create variable indicating use of unstructured data
df$Unstructured <- (df$Unstructured_data_type != "")
# Create variable indicating use of structured data
df$Structured <- (df$Structured_data_type != "")
# Create variable indicating types of data used for analysis
df$Data_type[df$Structured == 1] <- "Structured"
df$Data_type[df$Unstructured == 1] <- "Free-text"
df$Data_type[df$Unstructured + df$Structured == 2] <- "Both structured and free-text"
# Create variable indicating use of traditional ML method
df$Traditional[df$DL == ''] <- "Traditional machine learning"
df$Traditional[df$DL != ''] <- "Deep learning"
# Add variable that includes citation number to phenotype for plotting
df$Phenotype_ref <- paste0(df$Phenotype, " [",
df$Citation_Number, "]")
df$ML_type <- factor(df$ML_type, levels = c("Supervised",
"Semi-supervised",
"Weakly-supervised",
"Unsupervised"))
stacked_bar(df, "ML_type", "Traditional", order_by_count = FALSE)
# Traditional ML method.
traditional_ML_method_unnested <- unnest_string_var(df, "Traditional_ML_method")
print_tables(traditional_ML_method_unnested,
"ML_type",
"Traditional_ML_method_unnested",
top_count = 25,
restric_count = TRUE,
title = "Common traditional machine learning methods (Count > 1)")
print_multiple_items(traditional_ML_method_unnested,
"traditional machine learning methods")
# DL methods.
deep_learning_method_unnested <- unnest_string_var(df, "DL_method")
print_tables(deep_learning_method_unnested,
"DL_method_unnested",
"ML_type",
top_count = 25,
restric_count = TRUE,
title = "Common deep learning methods (Count > 1)",
)
print_multiple_items(deep_learning_method_unnested, "deep learning methods")
# Create dataframes for analysis of each ML subtype.
traditional_supervised <- df %>% filter(ML_type == "Supervised") %>% filter(DL_method == '')
deep_supervised <- df %>% filter(ML_type == "Supervised") %>% filter(DL_method != '')
semi_supervised <- df %>% filter(ML_type == "Semi-supervised")
weakly_supervised <- df %>% filter(ML_type == "Weakly-supervised")
un_supervised <- df %>% filter(ML_type == "Unsupervised")
# Create labels for analysis of each ML subtype.
traditional_supervised$Category <- "Traditional supervised"
deep_supervised$Category <- "Deep supervised"
semi_supervised$Category <- "Semi-supervised"
weakly_supervised$Category <- "Weakly-supervised"
un_supervised$Category <- "Unsupervised"
RNN_method_unnested <- unnest_string_var(deep_supervised, "RNN_subname")
RNN_plot <- horizontal_bar(RNN_method_unnested,
"RNN_subname_unnested",
title = "RNN",
ylim = 12)
CNN_method_unnested <- unnest_string_var(deep_supervised, "CNN_subname")
CNN_plot <- horizontal_bar(CNN_method_unnested,
"CNN_subname_unnested",
title = "CNN",
ylim = 12)
BERT_method_unnested <- unnest_string_var(deep_supervised, "BERT_subname")
BERT_plot <- horizontal_bar(BERT_method_unnested,
"BERT_subname_unnested",
title = "BERT",
ylim = 12)
FFNN_method_unnested <- unnest_string_var(deep_supervised, "FFNN_subname")
FFNN_plot <- horizontal_bar(FFNN_method_unnested,
"FFNN_subname_unnested",
title = "FFFN",
ylim = 12)
plot_grid(RNN_plot,
CNN_plot,
BERT_plot,
FFNN_plot,
ncol = 2,
nrow = 2,
align = "v",
axis = "l")
plot_all_top_pheno(traditional_supervised,
deep_supervised,
semi_supervised,
weakly_supervised,
un_supervised)
# All phenotype with count > 1.
temporal_unnested <- unnest_string_var(df, "Phenotype")
horizontal_bar(temporal_unnested,
"Phenotype_unnested",
restrict_count = TRUE,
ylim = 10,
legend_cap = "Temporal phenotype category")
data_source <- rbind(traditional_supervised,
deep_supervised,
semi_supervised,
weakly_supervised,
un_supervised)
stacked_bar(data_source, "Category", "Data_type", order_by_count = FALSE) +
scale_y_continuous(n.breaks = 10)
data_source_unnested <- unnest_string_var(df, "Data_type")
print_tables(data_source_unnested,
"Data_type",
top_count = 10,
title = "Use of structured and unstructured data")
# Structured data types.
structured_data_use <- df %>%
filter(Structured == 1) %>%
filter(Competition_data_name == "")
structured_data_use_unnested <- unnest_string_var(structured_data_use, "Structured_data_type")
p1 <- horizontal_bar(structured_data_use_unnested,
"Structured_data_type_unnested",
string_wrap = 20,
restrict_count = TRUE,
color_grid = color_panel <- pal_simpsons()(8), # Set the color
title = "Structured data type",
ylim = 60,
label_text = TRUE,
ylab = "Number of articles")
print_multiple_items(structured_data_use_unnested, "structured data types")
# Unstructured data types.
unstructured_data_use <- df %>%
filter(Unstructured == 1) %>%
filter(Competition_data_name == "")
unstructured_data_use_unnested <- unnest_string_var(unstructured_data_use, "Unstructured_data_type")
p2 <- horizontal_bar(unstructured_data_use_unnested,
"Unstructured_data_type_unnested",
string_wrap = 20,
restrict_count = TRUE,
color_grid = color_panel <- pal_simpsons()(12),
title = "Clinical note type",
ylim = 60,
label_text = TRUE,
ylab = "Number of articles")
print_multiple_items(unstructured_data_use_unnested, "unstructured data types")
plot_grid(p1, p2, ncol = 1, align = "v", axis = "l", labels = c('(a)', '(b)'))
term_unnested <- unnest_string_var(df, "Terminology")
term_unnested <- unnest_string_var(term_unnested, "Terminology_unnested")
print_multiple_items(term_unnested, "terminologies")
print_tables(term_unnested,
"Terminology_unnested_unnested",
"ML_type",
"Traditional",
top_count = 20,
restric_count = TRUE)
nlp_unnested <- unnest_string_var(df, "NLP_software")
print_multiple_items(nlp_unnested, "NLP software")
print_tables(nlp_unnested,
"NLP_software_unnested",
"ML_type",
"Traditional",
top_count = 10,
restric_count = TRUE)
embedding_data_unnested <- unnest_string_var(deep_supervised,
"Embedding_training_data")
print_tables(embedding_data_unnested,
"Embedding_training_data_unnested",
top_count = 10)
print_multiple_items(embedding_data_unnested,
"embedding training data")
embedding_training_unnested <- unnest_string_var(deep_supervised, "Embedding")
print_tables(embedding_training_unnested,
"Embedding_unnested",
top_count = 10)
print_multiple_items(embedding_training_unnested, "embedding training methods")
competition_data_unnested <- unnest_string_var(df, "Competition_data_name")
print_multiple_items(competition_data_unnested, "competition data")
print_tables(competition_data_unnested,
"Competition_data_name_unnested",
"ML_type",
"Traditional",
top_count = 10,
restric_count = FALSE,
hold_pos = TRUE)
open_data_unnested <- unnest_string_var(df %>% filter(Competition_data_name == ""),
"Data_source")
open_data <- c("MIMIC-III database", "MTSamples database")
open_data_unnested <- open_data_unnested %>%
filter(Data_source_unnested %in% open_data)
print_tables(open_data_unnested,
"Data_source_unnested",
"ML_type",
"Traditional",
top_count = 10,
restric_count = FALSE)
print(paste(nrow(df %>% filter(Openly_available_data == 0)),
"articles did not use openly available data"))
print(paste("Among these", nrow(df %>% filter(Openly_available_data == 0)),
"articles,",
nrow(df %>% filter(Openly_available_data == 0 & Reported_demographics == 1)),
"articles considered temporal phenotypes"))
count_unnested <- unnest_string_var(df, "Country")
print_tables(count_unnested,
"Country_unnested",
top_count = 10,
restric_count = FALSE,
hold_pos = TRUE)
print_summary_table(list(traditional_supervised,
deep_supervised,
semi_supervised,
weakly_supervised,
un_supervised,
df))
# Note: TSL = Traditional supervised learning.
# DSL = Deep supervised learning.
# SSL = Semi-supervised learning.
# WSL = Weakly-supervised learning.
# US = Unsupervised learning.
plot_validate_metrics(traditional_supervised,
comparator = "rule",
baseline = "traditional",
large_fig = FALSE)
df <- weakly_supervised
df_formatted <- get_metrics(df, "rule")
df_formatted <- get_metrics(df, "rule")
df_ML_better <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "Traditional ML"),
"Best_performing", "Best_comparator_Rule")
df_rule_better <- best_performing_model(df_formatted %>%
filter(Best_performing_model == "Rule-based"),
"Best_comparator_traditional",
"Best_performing")
g1_df <- df_ML_better %>% filter(baseline_all_better == 1)
g1 <- plot_rule_compare(g1_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g2_df <- df_ML_better %>% filter(baseline_all_better == 0,
baseline_sens_better == 0,
(baseline_ppv_better ==1 | is.na(baseline_ppv_better)))
g2 <- plot_rule_compare(g2_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g3_df <- df_ML_better %>% filter(baseline_all_better == 0 &
baseline_sens_better == 1,
(baseline_ppv_better == 0 | is.na(baseline_ppv_better)))
g3 <- plot_rule_compare(g3_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g4_df <- df_ML_better %>% filter(!(PMID %in% c(g1_df$PMID, g2_df$PMID, g3_df$PMID)))
nrow(df_ML_better)
nrow(g1_df)
nrow(g2_df)
nrow(g4_df)
nrow(g3_df)
12+13+0
c(g1_df$PMID, g2_df$PMID, g3_df$PMID)
View(df_ML_better)
df_ML_better$baseline_npv_better
df_ML_better$baseline_spec_better
df_ML_better$baseline_npv_better
g4_df <- df_ML_better %>% filter(baseline_all_better == 0 &
baseline_npv_better == 1,
(baseline_ppv_better == 0 | is.na(baseline_ppv_better)))
df_ML_better %>% filter(baseline_all_better == 0 &
baseline_npv_better == 1)
g4 <- plot_rule_compare(g4_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g4
g1_df <- df_ML_better %>% filter(baseline_all_better == 1)
g1 <- plot_rule_compare(g1_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g1
g2_df <- df_ML_better %>% filter((baseline_all_better == 0 | is.na(baseline_all_better),
g2_df <- df_ML_better %>% filter((baseline_all_better == 0 | is.na(baseline_all_better)),
(baseline_ppv_better == 0 | is.na(baseline_ppv_better)),
baseline_ppv_better == 1)
g2 <- plot_rule_compare(g2_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g2
g2_df <- df_ML_better %>% filter((baseline_all_better == 0 | is.na(baseline_all_better)) &
(baseline_ppv_better == 0 | is.na(baseline_ppv_better)) &
baseline_ppv_better == 1)
g2_df <- df_ML_better %>% filter(baseline_all_better == 0 &
(baseline_ppv_better == 0 | is.na(baseline_ppv_better)) &
baseline_ppv_better == 1)
g2_df <- df_ML_better %>% filter(baseline_all_better == 0 &
(baseline_ppv_better == 0) &
(baseline_ppv_better == 1 | is.na(baseline_ppv_better))
g2_df <- df_ML_better %>% filter((baseline_all_better == 0 | is.na(baseline_all_better)) &
g2_df <- df_ML_better %>% filter((baseline_all_better == 0 | is.na(baseline_all_better)) &
(baseline_sens_better == 0 | is.na(baseline_sens_better)) &
baseline_ppv_better == 1)
g2 <- plot_rule_compare(g2_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g2
g3_df <- df_ML_better %>% filter((baseline_all_better == 0 | is.na(baseline_all_better) &
baseline_sens_better == 1,
g3_df <- df_ML_better %>% filter((baseline_all_better == 0 | is.na(baseline_all_better)) &
baseline_sens_better == 1,
(baseline_ppv_better == 0 | is.na(baseline_ppv_better)))
g3 <- plot_rule_compare(g3_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g3
g4_df <- df_ML_better %>% filter((baseline_all_better == 0 | is.na(baseline_all_better))&
baseline_npv_better == 1)
g4 <- plot_rule_compare(g4_df,
study = "Phenotype_ref",
large_fig = large_fig, legend = TRUE)
g4
g3
g3
g3_df
12+13+13
g2
g1_df
